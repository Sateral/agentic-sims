'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertCircle, Copy, Home, Settings } from 'lucide-react';
import { YouTubeOAuthHelper } from '@/scripts/setupYouTubeOAuth';

export default function YouTubeCallback() {
  const searchParams = useSearchParams();
  const [status, setStatus] = useState<'loading' | 'success' | 'error'>(
    'loading'
  );
  const [refreshToken, setRefreshToken] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    const handleCallback = async () => {
      const code = searchParams.get('code');
      const error = searchParams.get('error');

      if (error) {
        setStatus('error');
        setError(`OAuth error: ${error}`);
        return;
      }

      if (!code) {
        setStatus('error');
        setError('No authorization code received');
        return;
      }

      try {
        const helper = new YouTubeOAuthHelper();
        const tokens = await helper.exchangeCodeForTokens(code);

        if (tokens.refresh_token) {
          setRefreshToken(tokens.refresh_token);
          setStatus('success');
        } else {
          setStatus('error');
          setError(
            'No refresh token received. Make sure to include "access_type=offline" in your OAuth request.'
          );
        }
      } catch (err) {
        setStatus('error');
        setError(
          err instanceof Error
            ? err.message
            : 'Failed to exchange code for tokens'
        );
      }
    };

    handleCallback();
  }, [searchParams]);

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-2xl mx-auto space-y-6">
        <div className="text-center">
          <h1 className="text-3xl font-bold">YouTube OAuth Callback</h1>
          <p className="text-gray-600 mt-2">
            Processing your YouTube authorization...
          </p>
        </div>

        {status === 'loading' && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <div className="w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin" />
                Processing Authorization
              </CardTitle>
              <CardDescription>
                Exchanging authorization code for access tokens...
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                Please wait while we complete the OAuth flow.
              </p>
            </CardContent>
          </Card>
        )}

        {status === 'success' && refreshToken && (
          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-green-700">
                <CheckCircle className="w-5 h-5" />
                Authorization Successful!
              </CardTitle>
              <CardDescription>
                Your YouTube OAuth setup is complete. Follow the steps below to
                finish configuration.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">
                  Step 1: Copy your refresh token
                </h4>
                <div className="bg-gray-100 p-3 rounded-lg">
                  <div className="flex items-center justify-between gap-2">
                    <code className="text-sm break-all">{refreshToken}</code>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => copyToClipboard(refreshToken)}
                    >
                      <Copy className="w-4 h-4" />
                      {copied ? 'Copied!' : 'Copy'}
                    </Button>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="font-medium mb-2">
                  Step 2: Add to your .env file
                </h4>
                <div className="bg-gray-900 text-green-400 p-3 rounded-lg font-mono text-sm">
                  <div className="flex items-center justify-between gap-2">
                    <span>YOUTUBE_REFRESH_TOKEN="{refreshToken}"</span>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() =>
                        copyToClipboard(
                          `YOUTUBE_REFRESH_TOKEN="${refreshToken}"`
                        )
                      }
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </div>

              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Important:</strong> Add the line above to your{' '}
                  <code>.env</code> file and restart your development server for
                  the changes to take effect.
                </AlertDescription>
              </Alert>

              <div className="flex gap-2 pt-4">
                <Button asChild>
                  <a href="/dashboard?tab=settings">
                    <Settings className="w-4 h-4 mr-2" />
                    Go to Settings
                  </a>
                </Button>
                <Button variant="outline" asChild>
                  <a href="/">
                    <Home className="w-4 h-4 mr-2" />
                    Home
                  </a>
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {status === 'error' && (
          <Card className="border-red-200 bg-red-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-red-700">
                <AlertCircle className="w-5 h-5" />
                Authorization Failed
              </CardTitle>
              <CardDescription>
                There was an error during the OAuth process.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Error:</strong> {error}
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <h4 className="font-medium">Troubleshooting:</h4>
                <ul className="text-sm text-gray-600 space-y-1 ml-4">
                  <li>
                    • Make sure your Google Cloud Console project has the
                    YouTube Data API enabled
                  </li>
                  <li>
                    • Verify that the OAuth consent screen is properly
                    configured
                  </li>
                  <li>
                    • Check that your redirect URI is exactly:{' '}
                    <code>http://localhost:3000/auth/youtube/callback</code>
                  </li>
                  <li>
                    • Ensure your OAuth request includes{' '}
                    <code>access_type=offline</code> and{' '}
                    <code>prompt=consent</code>
                  </li>
                </ul>
              </div>

              <div className="flex gap-2 pt-4">
                <Button asChild>
                  <a href="/auth/youtube/setup">Try Again</a>
                </Button>
                <Button variant="outline" asChild>
                  <a href="/">
                    <Home className="w-4 h-4 mr-2" />
                    Home
                  </a>
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Debug Information */}
        <Card className="opacity-75">
          <CardHeader>
            <CardTitle className="text-sm">Debug Information</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-xs text-gray-600 space-y-1">
              <div>Status: {status}</div>
              <div>
                Code received: {searchParams.get('code') ? 'Yes' : 'No'}
              </div>
              <div>Error parameter: {searchParams.get('error') || 'None'}</div>
              <div>Refresh token received: {refreshToken ? 'Yes' : 'No'}</div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
