// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Simulation {
  id          String   @id @default(cuid())
  name        String
  type        String   // "bouncing_balls", "particle_physics", etc.
  parameters  Json     // simulation parameters
  status      String   // "pending", "generating", "completed", "failed"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  videos      Video[]
  
  @@map("simulations")
}

model Video {
  id            String   @id @default(cuid())
  simulationId  String
  title         String
  description   String
  duration      Int      // in seconds
  status        String   // "generated", "selected", "uploaded", "failed"
  aiScore       Float?   // AI quality/appeal score (0-1)
  thumbnailUrl  String?
  createdAt     DateTime @default(now())
  
  simulation    Simulation @relation(fields: [simulationId], references: [id])
  uploads       Upload[]
  
  @@map("videos")
}

model Upload {
  id          String   @id @default(cuid())
  videoId     String
  platform    String   // "youtube", "tiktok", "instagram"
  platformId  String   // platform-specific video ID
  url         String   // public URL
  status      String   // "uploading", "published", "failed"
  uploadedAt  DateTime @default(now())
  
  video       Video @relation(fields: [videoId], references: [id])
  metrics     Metric[]
  
  @@map("uploads")
}

model Metric {
  id        String   @id @default(cuid())
  uploadId  String
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  updatedAt DateTime @updatedAt
  
  upload    Upload @relation(fields: [uploadId], references: [id])
  
  @@map("metrics")
}

model ScheduledJob {
  id          String   @id @default(cuid())
  type        String   // "daily_upload", "metrics_sync"
  status      String   // "pending", "running", "completed", "failed"
  scheduledAt DateTime
  completedAt DateTime?
  error       String?
  
  @@map("scheduled_jobs")
}